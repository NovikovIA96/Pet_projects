import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import scipy.stats as sts
import seaborn as sns
import streamlit as st

# настройки отображения дашборда на странице
st.set_page_config(
    page_title="Проверка статистических гипотез",
    layout="wide",
)

# стилевой файл для большого шрифта
st.markdown("""
<style>
.big-font {
    font-size:22px !important;
}
</style>
""", unsafe_allow_html=True)

st.title('Дашборд: Проверка гипотез о заболеваемости в компании')
st.write('**<p class="big-font">1. Загрузим данные</p>**', unsafe_allow_html=True)

# загрузчик файлов
uploaded_file = st.file_uploader('Choose a file')
st.caption('Ошибка уйдет сразу после загрузки')
df = pd.read_csv(uploaded_file, sep = ';')
st.write('Первые несколько строчек загруженного файла:')
st.write(df.head(7))

# определяем диапазон значений числа пропущенных дней (sick_days) и возраста сотрудников (age)
sick_leave_days = df['Количество больничных дней'].unique().tolist()
age_range = df['Возраст'].unique().tolist()

# добавляем два слайдера на боковую панель
with st.sidebar:
    sick_days = st.slider('Пропущенные дни:',min(sick_leave_days),max(sick_leave_days),2)
    age = st.slider('Возраст:', min(age_range),max(age_range), 30)
    
st.write('**<p class="big-font"> 2. Из загруженного файла отбираются записи, в которых число пропущенных дней больше выставленного пользователем порога (пропущенные дни). Далее из отобранных данных извлекаются две выборки: в первой возраст сотрудников больше заданного порога (возраст), во второй - меньше. Извлеченные выборки являются независимыми (несвязанными). </p>**', unsafe_allow_html=True)

#фильтрация исходных данных и последующее формирование выборок
data1 = df[df['Количество больничных дней'] > sick_days]
elder_grp = data1[data1['Возраст'] > age]
younger_grp = data1[data1['Возраст'] <= age]

st.write('**<p class="big-font"> 3. Построим гистограммы распределения значений в обеих выборках и KDE-plot</p>**',unsafe_allow_html=True)

#построение гистограмм
fig_col1, fig_col2 = st.columns(2)

with fig_col1:
    st.markdown('Старшие товарищи')
    fig = plt.figure()
    plt.hist(elder_grp['Количество больничных дней'], color = 'maroon')
    plt.xlabel('Количество пропущенных дней')
    plt.ylabel('Число пропустивших')
    st.pyplot(fig)
    
with fig_col2:
    st.markdown('Младшие')
    fig = plt.figure()
    plt.hist(younger_grp['Количество больничных дней'], color = 'blue')
    plt.xlabel('Количество пропущенных дней')
    plt.ylabel('Число пропустивших')
    st.pyplot(fig)
    

data2 = data1.reset_index().drop('index', axis = 1)
data2['Группа'] = None
for i in range(0, len(data2)):
    if data2.loc[i,'Возраст'] > age:
        data2.loc[i,'Группа'] = 'Старшие товарищи'
    else:
        data2.loc[i,'Группа'] = 'Младшие'
st.write('')
st.write('**KDE-plot:**')
fig1 = plt.figure(figsize = (8,4))
sns.kdeplot(data = data2, x ='Количество больничных дней', hue = 'Группа')
st.pyplot(fig1)

st.write('**<p class="big-font"> 4. Проверим гипотезу о том, что выборки извлечены из ГС с нормально распределенной случайной величиной. Это необходимо для выбора статистического критерия в дальнейшем. </p>**',unsafe_allow_html=True)

# Проверка гипотезы о нормальности распределения данных
st.write('1. Сформируем нулевую и альтернативную гипотезы:')
st.markdown(
"""
- В ГС, из которой извлечены выборки, случайная величина распределена нормально (H0)
- В ГС случайная величина распределена ненормально (H1)
"""
)
st.write('2. Выберем значение P-уровня значимости: p = 0.05')
st.write('3. Выберем статистический критерий для проверки нормальности распределения: тест Шапиро-Вилка')
st.write('4. Если рассчитанная с помощью теста вероятность получить такие или еще большие отклонения при условии верности нулевой гипотезы окажется меньше значения p = 0.05, то H0 будет отклонена. Если окажется, что p-value > 0.05, то не будет достаточных оснований для отклонения H0.')

# две секции с результатами проверок нормальности данных в обеих выборках (и ГС)
col1, col2 = st.columns(2)

with col1:
    st.markdown('Старшие товарищи')
    stats_e, p_e = sts.shapiro(elder_grp['Количество больничных дней'])
    st.write('statistic:',stats_e,'p-value:',p_e)
    if p_e < 0.05:
        st.write('В ГС СВ распределена не нормально!')
    else:
        st.write('Распределение СВ в ГС нормальное')


with col2:
    st.markdown('Младшие')
    stats_y, p_y = sts.shapiro(younger_grp['Количество больничных дней'])
    st.write('statistic:',stats_y,'p-value:',p_y)
    if p_y < 0.05:
        st.write('В ГС СВ распределена не нормально!')
    else:
        st.write('Распределение СВ в ГС нормальное')

st.write('**<p class="big-font"> 5. Проверим гипотезу о значимости различий в частоте пропусков в двух рассматриваемых группах </p>**',unsafe_allow_html=True)

# Проверка гипотезы о значимости различий. T-test при нормальном распределении. U-критерий Манна-Уитни, если СВ распределена не нормально.
st.write('1. Сформируем нулевую и альтернативную гипотезы:')
st.markdown(
"""
- Отсутствуют статистически значимые различия в частоте пропусков старших и более молодых сотрудников (H0)
- Есть статистически значимые различия в частоте пропусков двух указанных групп (H1)
"""
)
st.write('Изложенная в такой форме альтернативная гипотеза подразумевает двустороннюю проверку: знак различий может быть как положительным (первая группа пропускает чаще), так и отрицательным (вторая группа пропускает чаще). Однако для нашей задачи разумнее осуществить одностороннюю проверку гипотезы. В этом случае альтернативная гипотеза может быть сформулирована так:')
st.markdown(
"""
- Взрослые сотрудники пропускают два и более рабочих дня по болезни значимо чаще молодых (H1)
"""
)
st.write('2. Выберем (пороговое) значение P-уровня значимости: p = 0.05')
st.write('3. Выберем статистический критерий для проверки сформулированной гипотезы:')

if p_e < 0.05 or p_y < 0.05:
    st.write('Рассматриваемые выборки являются независимыми (несвязанными). В хотя бы одной из них данные распределены ненормально, необходимо использовать критерий **_Манна-Уитни_**')
else:
    st.write('Рассматриваемые выборки являются независимыми (несвязанными). Обе выборки извлечены из ГС, где случайная величина распределена нормально. Можно использовать **_t-критерий Стьюдента для независимых выборок_**')

st.write('4. Правила игры:')
st.markdown(
"""
- Выданное тестом p-value < 0.05: Различия статистически значимы. Взрослые пропускают чаще!
- p-value > 0.05: Нет достаточных оснований отвергнуть H0 и утверждать о значимости различий
"""
)

st.write('5. Проверка гипотезы о различии в частоте пропусков')

# Проверка гипотезы о том, что частоты пропусков в обеих выборках различаются
ylist = younger_grp['Количество больничных дней'].to_numpy()
elist = elder_grp['Количество больничных дней'].to_numpy()

if p_e < 0.05 or p_y < 0.05:
    st.write('U-критерий Манна-Уитни:')
    st.write(sts.mannwhitneyu(elist,ylist,alternative ='greater'))
    stats_MW, p_MW = sts.mannwhitneyu(elist,ylist,alternative ='greater')
    if p_MW < 0.05:
        st.write('Различия **значимые**. Более взрослые сотрудники пропускают чаще.')
    else:
        st.write('Различия в частоте пропусков двух рассматриваемых групп **_статистически не значимы_**')
        
else:
    st.write('t-критерий Стьюдента')
    st.write(sts.ttest_ind(ylist,elist))
    stats_stud, p_stud = sts.ttest_ind(ylist,elist)
    if p_stud < 0.05:
        st.write('Различия **значимые**')
        st.write('Среднее количество пропущенных дней в рассматриваемых группах:')
        st.write('Более взрослые:', np.mean(elist))
        st.write('Более молодые:', np.mean(ylist))
        if np.mean(ylist) < np.mean(elist):
            st.write('Более взрослые сотрудники пропускают **значимо** чаще.')
        else:
            st.write('Более молодые сотрудники пропускают **значимо** чаще.')
        
    else:
        st.write('Различия в частоте пропусков двух рассматриваемых групп **_статистически не значимы_**')
        





#### Предположения, которые оказались неверными или не такими точными

## Пусть различия в частоте пропусков оказались значимыми. Что дальше?
#if (p_MW != 0 and p_MW < 0.05) or (p_stud != 0 and p_stud < 0.05):
#    st.write('**<p class="big-font"> 6. Определение категории, которая пропускает значимо чаще </p>**',unsafe_allow_html=True)
#    st.caption('Здесь есть некоторая "загвоздка". Дело в том, что U-критерий ничего не может сказать о том, какая из групп пропускает чаще, он указывает на статистически значимые и незначимые различия в законах распределения и не оперирует с их параметрами (поэтому и называется непараметрическим критерием). Поэтому на основании данного критерия для не нормально распределенных данных сказать, кто пропускает больше, нельзя. В качестве предположения можно попробовать сравнить меры центральной тенденции для распределений значений в выборках.')
#    st.caption('В случае нормального распределения такой подход обоснован и вполне может быть использован для ответа на поставленный вопрос. В качестве меры можно использовать среднее арифметическое.')
#    st.caption('Если данные распределены не нормально, среднее арифметическое лучше не использовать. Оно чувствительно к выбросам и асимметрии данных. Более адекватную оценку позволяет получить сравнение медиан обоих распределений.')
#    st.caption('Ниже будет проведено сравнение среднего арифметического (в случае нормального распределения данных в выборках) и медианы (при ненормальном распределении) для двух рассматриваемых групп. На основании этого сравнении и будет сделан вывод о том, кто пропускает значимо чаще.')
    
#    if p_stud != 0 and p_stud < 0.05:
#        st.write('Среднее количество пропущенных дней в рассматриваемых группах:')
#        st.write('Более взрослые:', np.mean(elist))
#        st.write('Более молодые:', np.mean(ylist))
#        if np.mean(ylist) < np.mean(elist):
#            st.write('**Итог:** Более взрослые сотрудники пропускают **значимо** чаще.')
#        else:
#            st.write('**Итог:** Более молодые сотрудники пропускают **значимо** чаще.')

   
#    if p_MW != 0 and p_MW < 0.05:
#        st.write('Медиана количества пропущенных дней в рассматриваемых группах:')
#        st.write('Более взрослые:', np.median(elist))
#        st.write('Более молодые:', np.median(ylist))
#        if np.median(ylist) < np.median(elist):
#            st.write('**Итог:** Различия значимые! _Предположительно, более взрослые сотрудники пропускают чаще._')
#        else:
#            st.write('**Итог:** Различия значимые! _Предположительно, более молодые сотрудники пропускают чаще._')
            
